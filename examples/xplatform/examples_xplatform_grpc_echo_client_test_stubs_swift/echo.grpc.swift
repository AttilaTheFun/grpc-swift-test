//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: examples/xplatform/grpc/echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf
import examples_xplatform_grpc_echo_client_services_swift
import examples_xplatform_grpc_echo_proto


@available(swift, deprecated: 5.6)
extension RulesSwift_Examples_Grpc_EchoServiceTestClient: @unchecked Sendable {}

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class RulesSwift_Examples_Grpc_EchoServiceTestClient: RulesSwift_Examples_Grpc_EchoServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RulesSwift_Examples_Grpc_EchoServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: RulesSwift_Examples_Grpc_EchoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Echo RPC. This must be called
  /// before calling 'echo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeEchoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<RulesSwift_Examples_Grpc_EchoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<RulesSwift_Examples_Grpc_EchoRequest, RulesSwift_Examples_Grpc_EchoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: RulesSwift_Examples_Grpc_EchoServiceClientMetadata.Methods.echo.path, requestHandler: requestHandler)
  }

  public func enqueueEchoResponse(
    _ response: RulesSwift_Examples_Grpc_EchoResponse,
    _ requestHandler: @escaping (FakeRequestPart<RulesSwift_Examples_Grpc_EchoRequest>) -> () = { _ in }
  ) {
    let stream = self.makeEchoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Echo'
  public var hasEchoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: RulesSwift_Examples_Grpc_EchoServiceClientMetadata.Methods.echo.path)
  }
}

