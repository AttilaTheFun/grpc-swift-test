//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: examples/xplatform/grpc/echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf
import examples_xplatform_grpc_echo_proto


/// To build a server, implement a class that conforms to this protocol.
public protocol RulesSwift_Examples_Grpc_EchoServiceProvider: CallHandlerProvider {
  var interceptors: RulesSwift_Examples_Grpc_EchoServiceServerInterceptorFactoryProtocol? { get }

  func echo(request: RulesSwift_Examples_Grpc_EchoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RulesSwift_Examples_Grpc_EchoResponse>
}

extension RulesSwift_Examples_Grpc_EchoServiceProvider {
  public var serviceName: Substring {
    return RulesSwift_Examples_Grpc_EchoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Echo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RulesSwift_Examples_Grpc_EchoRequest>(),
        responseSerializer: ProtobufSerializer<RulesSwift_Examples_Grpc_EchoResponse>(),
        interceptors: self.interceptors?.makeEchoInterceptors() ?? [],
        userFunction: self.echo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RulesSwift_Examples_Grpc_EchoServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RulesSwift_Examples_Grpc_EchoServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func echo(
    request: RulesSwift_Examples_Grpc_EchoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RulesSwift_Examples_Grpc_EchoResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RulesSwift_Examples_Grpc_EchoServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RulesSwift_Examples_Grpc_EchoServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return RulesSwift_Examples_Grpc_EchoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: RulesSwift_Examples_Grpc_EchoServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Echo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RulesSwift_Examples_Grpc_EchoRequest>(),
        responseSerializer: ProtobufSerializer<RulesSwift_Examples_Grpc_EchoResponse>(),
        interceptors: self.interceptors?.makeEchoInterceptors() ?? [],
        wrapping: self.echo(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol RulesSwift_Examples_Grpc_EchoServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'echo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEchoInterceptors() -> [ServerInterceptor<RulesSwift_Examples_Grpc_EchoRequest, RulesSwift_Examples_Grpc_EchoResponse>]
}

public enum RulesSwift_Examples_Grpc_EchoServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EchoService",
    fullName: "rules_swift.examples.grpc.EchoService",
    methods: [
      RulesSwift_Examples_Grpc_EchoServiceServerMetadata.Methods.echo,
    ]
  )

  public enum Methods {
    public static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/rules_swift.examples.grpc.EchoService/Echo",
      type: GRPCCallType.unary
    )
  }
}
